EW <- geojson_read("http://geoportal.statistics.gov.uk/datasets/8edafbe3276d4b56aec60991cbddda50_2.geojson", what = "sp")
EW <- geojson_read("http://geoportal.statistics.gov.uk/datasets/8edafbe3276d4b56aec60991cbddda50_2.geojson", what = "sp")
Pricedata <- read.csv('PriceData.csv')
Pricedata$Value <- as.numeric(Pricedata$Value)
names(Pricedata) <- c("Code", "Value")
LondonWards <- readOGR("London_Ward_CityMerged.shp", layer="London_Ward_CityMerged")
BoroughMap <- EW[grep("^E09",EW@data$lad15cd),]
Wastepoint <- geojson_read("point.geojson", what = "sp")
tmap_mode('view')
summary(Wastepoint)
BNG = "+init=epsg:27700"
WGS = "+init=epsg:4326"
BoroughMapBNG <- spTransform(BoroughMap,BNG)
WastepointBNG <- spTransform(Wastepoint, BNG)
tm_shape(BoroughMapBNG) +
tm_polygons(col = NA, alpha = 1.0) +
tm_shape(WastepointBNG) +
tm_dots(col = "blue")
WastepointSub <- WastepointBNG[BoroughMapBNG,]
WastepointSubSF <- st_as_sf(WastepointSub)
tm_shape(BoroughMapBNG) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(WastepointSub) +
tm_dots(col = "blue")
tm_shape(BoroughMapBNG) +
tm_polygons("WasteDensity",
style="jenks",
palette="PuOr",
midpoint=NA,
title="Waste Point Density")
res <- poly.counts(WastepointSub, BoroughMapBNG)
BoroughMapBNG@data$WastepointCount<-res
BoroughMapBNG@data$WasteDensity <- BoroughMapBNG$WastepointCount/poly.areas(BoroughMapBNG)
BoroughMapBNG@data
tm_shape(BoroughMapBNG) +
tm_polygons("WasteDensity",
style="jenks",
palette="PuOr",
midpoint=NA,
title="Waste Point Density")
tmap_mode('view')
summary(Wastepoint)
BNG = "+init=epsg:27700"
WGS = "+init=epsg:4326"
BoroughMapBNG <- spTransform(BoroughMap,BNG)
WastepointBNG <- spTransform(Wastepoint, BNG)
tm_shape(BoroughMapBNG) +
tm_polygons(col = NA, alpha = 1.0) +
tm_shape(WastepointBNG) +
tm_dots(col = "blue")
#Here we can find some points lay out the boundaries, thus we need clip the points to make all points are in boundary.
WastepointSub <- WastepointBNG[BoroughMapBNG,]
tm_shape(BoroughMapBNG) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(WastepointSub) +
tm_dots(col = "blue")
#####
#First calculate the centroids of all Wards in London
coordsW <- coordinates(BoroughMapBNG)
plot(coordsW)
LWard_nb <- poly2nb(LondonWards, queen=T)
LB_nb <- poly2nb(BoroughMapBNG, queen=T)
#plot them
plot(LB_nb, coordinates(coordsW), col="red")
#add a map underneath
plot(BoroughMapBNG, add=T)
BoroughMapSF <- read_shape("BoundaryData/england_lad_2011Polygon.shp", as.sf = TRUE)
BoroughMapSF <- read_shape("BoundaryData/england_lad_2011.shp", as.sf = TRUE)
qtm(BoroughMapSF)
library(spatstat)
library(sp)
library(rgeos)
library(maptools)
library(GISTools)
library(tmap)
library(sf)
library(geojsonio)
library(tmaptools)
library(raster)
library(fpc)
library(plyr)
library(OpenStreetMap)
library(rgdal)
library(tidyverse)
library(broom)
library(ggplot2)
BoroughMapSF <- read_shape("BoundaryData/england_lad_2011.shp", as.sf = TRUE)
BoroughMapSF <- read_shape("BoundaryData/england_lad_2011.shp", as.sf = TRUE)
Pricedata <- read.csv('PriceData.csv')
Pricedata$Value <- as.numeric(Pricedata$Value)
names(Pricedata) <- c("Code", "Value")
LondonWards <- readOGR("London_Ward_CityMerged.shp", layer="London_Ward_CityMerged")
BoroughMap <- as(BoroughMapSF, "Spatial")
Wastepoint <- geojson_read("point.geojson", what = "sp")
tmap_mode('view')
summary(Wastepoint)
BNG = "+init=epsg:27700"
WGS = "+init=epsg:4326"
BoroughMapBNG <- spTransform(BoroughMap,BNG)
WastepointBNG <- spTransform(Wastepoint, BNG)
tm_shape(BoroughMapBNG) +
tm_polygons(col = NA, alpha = 1.0) +
tm_shape(WastepointBNG) +
tm_dots(col = "blue")
#Here we can find some points lay out the boundaries, thus we need clip the points to make all points are in boundary.
WastepointSub <- WastepointBNG[BoroughMapBNG,]
tm_shape(BoroughMapBNG) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(WastepointSub) +
tm_dots(col = "blue")
res <- poly.counts(WastepointSub, BoroughMapBNG)
BoroughMapBNG@data$WastepointCount<-res
BoroughMapBNG@data$WasteDensity <- BoroughMapBNG$WastepointCount/poly.areas(BoroughMapBNG)
BoroughMapBNG@data
tm_shape(BoroughMapBNG) +
tm_polygons("WasteDensity",
style="jenks",
palette="PuOr",
midpoint=NA,
title="Waste Point Density")
I_O_brough <- read.csv('Inner_Outer.csv')
BoroughMapSF <- merge(BoroughMapSF, I_O_brough, by.x = "code", by.y = "Code")
View(BoroughMapSF)
View(I_O_brough)
BoroughMapSF <- read_shape("BoundaryData/england_lad_2011.shp", as.sf = TRUE)
I_O_brough <- read.csv('Inner_Outer.csv')
names(I_O_brough) <- c("Code", "Inner_Outer")
BoroughMapSF <- merge(BoroughMapSF, I_O_brough, by.x = "code", by.y = "Code")
Pricedata <- read.csv('PriceData.csv')
Pricedata$Value <- as.numeric(Pricedata$Value)
names(Pricedata) <- c("Code", "Value")
LondonWards <- readOGR("London_Ward_CityMerged.shp", layer="London_Ward_CityMerged")
BoroughMap <- as(BoroughMapSF, "Spatial")
Wastepoint <- geojson_read("point.geojson", what = "sp")
tmap_mode('view')
summary(Wastepoint)
BNG = "+init=epsg:27700"
WGS = "+init=epsg:4326"
BoroughMapBNG <- spTransform(BoroughMap,BNG)
WastepointBNG <- spTransform(Wastepoint, BNG)
tm_shape(BoroughMapBNG) +
tm_polygons(col = NA, alpha = 1.0) +
tm_shape(WastepointBNG) +
tm_dots(col = "blue")
#Here we can find some points lay out the boundaries, thus we need clip the points to make all points are in boundary.
WastepointSub <- WastepointBNG[BoroughMapBNG,]
tm_shape(BoroughMapBNG) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(WastepointSub) +
tm_dots(col = "blue")
res <- poly.counts(WastepointSub, BoroughMapBNG)
BoroughMapBNG@data$WastepointCount<-res
BoroughMapBNG@data$WasteDensity <- BoroughMapBNG$WastepointCount/poly.areas(BoroughMapBNG)
BoroughMapBNG@data
tm_shape(BoroughMapBNG) +
tm_polygons("WasteDensity",
style="jenks",
palette="PuOr",
midpoint=NA,
title="Waste Point Density")
BroughBNGSF <- st_as_sf(BoroughMapBNG)
View(BoroughMapSF)
View(BroughBNGSF)
View(BroughBNGSF)
BroughOuter <- BroughBNGSF[which(Inner_Outer=='Outer London')]
BroughOuter <- BroughBNGSF[which(BroughBNGSF$Inner_Outer=='Outer London')]
BroughOuter <- BroughBNGSF[which(BroughBNGSF$Inner_Outer =='Outer London')]
BroughOuter <- BroughBNGSF[which(BroughBNGSF$Inner_Outer =='Outer London'),]
View(BroughOuter)
qtm(BroughOuter)
WardsOuter <- LondonWards[BroughOuter,]
proj4string(LondonWards) <- CRS("+init=epsg:27700")
WardsOuter <- LondonWards[BroughOuter,]
tmap_mode('view')
summary(Wastepoint)
BNG = "+init=epsg:27700"
WGS = "+init=epsg:4326"
BoroughMapBNG <- spTransform(BoroughMap,BNG)
WastepointBNG <- spTransform(Wastepoint, BNG)
tm_shape(BoroughMapBNG) +
tm_polygons(col = NA, alpha = 1.0) +
tm_shape(WastepointBNG) +
tm_dots(col = "blue")
#Here we can find some points lay out the boundaries, thus we need clip the points to make all points are in boundary.
WastepointBNG <- WastepointBNG[BoroughMapBNG,]
summary(Wastepoint)
tm_shape(BoroughMapBNG) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(WastepointBNG) +
tm_dots(col = "blue")
WastepointSub <- WastepointBNG[BroughOuter,]
BroughOuterSP <- as(BroughBNGSF,"Spatial")
WastepointSub <- WastepointBNG[BroughOuterSP,]
BroughOuterSP <- spTransform(BroughOuterSP,BNG)
WastepointSub <- WastepointBNG[BroughOuterSP,]
qtm(WastepointSub)
WastepointSub <- WastepointBNG[BroughOuterSP,]
qtm(WastepointSub)
BroughOuterSP <- as(BroughOuter,"Spatial")
BroughOuterSP <- spTransform(BroughOuterSP,BNG)
WastepointSub <- WastepointBNG[BroughOuterSP,]
qtm(WastepointSub)
WardsOUT <- LondonWards[BroughOuterSP,]
qtm(WardsOUT)
BroughOuter <- BroughBNGSF[which(BroughBNGSF$Inner_Outer =='Outer London'),]
BroughOuterSP <- as(BroughOuter,"Spatial")
BroughOuterSP <- spTransform(BroughOuterSP,BNG)
WastepointSub <- WastepointBNG[BroughOuterSP,]
WardsOUT <- LondonWards[BroughOuterSP,]
qtm(WardsOUT)
res <- poly.counts(WastepointSub, WardsOUT)
WardsOUT@data$WastepointCount<-res
WardsOUT@data$BlueDensity <- WardsOUT$WastepointCount/poly.areas(WardsOUT)
WardsOUT@data
BroughOuter <- BroughBNGSF[which(BroughBNGSF$Inner_Outer =='Outer London'),]
BroughOuterSP <- as(BroughOuter,"Spatial")
BroughOuterSP <- spTransform(BroughOuterSP,BNG)
WastepointSub <- WastepointBNG[BroughOuterSP,]
WardsOUT <- LondonWards[BroughOuterSP,]
tm_shape(WardsOUT) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(WastepointSub) +
tm_dots(col = "blue")
res <- poly.counts(WastepointSub, WardsOUT)
WardsOUT@data$WastepointCount<-res
WardsOUT@data$WasteDensity <- WardsOUT$WastepointCount/poly.areas(WardsOUT)
tm_shape(WardsOUT) +
tm_polygons("WasteDensity",
style="jenks",
palette="PuOr",
midpoint=NA,
title="Waste Point Density")
newvar<-0
attach(WardsOUT)
WardsOUTSF <- st_as_sf(WardsOUT)
newvar<-0
attach(WardsOUTSF)
newvar<-0
recode<-function(variable){
newvar[variable>0]<-TRUE
newvar[variable==0]<-FALSE
return(newvar)
}
WardsOUTSF$WastepointCount_recode <- recode(WastepointCount)
WardsOUTSF$WastepointCount <- as.numeric(LondonWardsSF$WastepointCount)
newvar<-0
attach(WardsOUTSF)
newvar<-0
recode<-function(variable){
newvar[variable>0]<-TRUE
newvar[variable==0]<-FALSE
return(newvar)
}
WardsOUTSF$WastepointCount_recode <- recode(WastepointCount)
WardsOUTSF$WastepointCount <- as.numeric(WardsOUT$WastepointCount)
newvar<-0
attach(WardsOUTSF)
newvar<-0
recode<-function(variable){
newvar[variable>0]<-TRUE
newvar[variable==0]<-FALSE
return(newvar)
}
WardsOUTSF$WastepointCount_recode <- recode(WastepointCount)
WardsOUTSF$WastepointCount <- as.numeric(WardsOUTSF$WastepointCount)
tm_shape(WardsOUTSF) +
tm_polygons("WastepointCount_recode")
WithWaste <- subset(WardsOUTSF, WastepointCount_recode > 0, select = c(NAME, Value,WastepointCount))
View(WardsOUTSF)
BroughOuter <- BroughBNGSF[which(BroughBNGSF$Inner_Outer =='Outer London'),]
BroughOuterSP <- as(BroughOuter,"Spatial")
BroughOuterSP <- spTransform(BroughOuterSP,BNG)
WastepointSub <- WastepointBNG[BroughOuterSP,]
LondonWards@data <- data.frame(LondonWards@data,Pricedata[match(LondonWards@data[,"GSS_CODE"],Pricedata[,"Code"]),])
WardsOUT <- LondonWards[BroughOuterSP,]
tm_shape(WardsOUT) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(WastepointSub) +
tm_dots(col = "blue")
res <- poly.counts(WastepointSub, WardsOUT)
WardsOUT@data$WastepointCount<-res
WardsOUT@data$WasteDensity <- WardsOUT$WastepointCount/poly.areas(WardsOUT)
tm_shape(WardsOUT) +
tm_polygons("WasteDensity",
style="jenks",
palette="PuOr",
midpoint=NA,
title="Waste Point Density")
WardsOUTSF <- st_as_sf(WardsOUT)
newvar<-0
attach(WardsOUTSF)
newvar<-0
recode<-function(variable){
newvar[variable>0]<-TRUE
newvar[variable==0]<-FALSE
return(newvar)
}
WardsOUTSF$WastepointCount_recode <- recode(WastepointCount)
WardsOUTSF$WastepointCount <- as.numeric(WardsOUTSF$WastepointCount)
tm_shape(WardsOUTSF) +
tm_polygons("WastepointCount_recode")
WithWaste <- subset(WardsOUTSF, WastepointCount_recode > 0, select = c(NAME, Value,WastepointCount))
WithoutWaste<- subset(WardsOUTSF, WastepointCount_recode < 1, select = c(NAME, Value))
qplot(sample = Value, data = WithWaste)
ggplot(WithWaste, aes(sample=Value))+stat_qq()
t.test(WithWaste$Value,WithoutWaste$Value,paired = F)
ggplot(WithoutWaste, aes(sample=Value))+stat_qq()
model1 <- lm(log(Value) ~ WastepointCount, data = WithWaste)
model1_res <- tidy(model1)
summary(model1)
WithWaste <- subset(LondonWardsSF, WastepointCount_recode > 0, select = c(NAME, Value,WastepointCount,WasteDensity))
WithWaste <- subset(WardsOUTSF, WastepointCount_recode > 0, select = c(NAME, Value,WastepointCount,WasteDensity))
model1 <- lm(log(Value) ~ WasteDensity, data = WithWaste)
model1_res <- tidy(model1)
summary(model1)
model1 <- lm(log(Value) ~ WasteDensity, data = WardsOUTSF)
model1_res <- tidy(model1)
summary(model1)
model1 <- lm(log(Value) ~ WasteDensity+WastepointCount_recode, data = WardsOUTSF)
model1_res <- tidy(model1)
summary(model1)
model1 <- lm(Value ~ WasteDensity+WastepointCount_recode, data = WardsOUTSF)
model1_res <- tidy(model1)
summary(model1)
model1 <- lm(Value ~ WasteDensity, data = WithWaste)
model1_res <- tidy(model1)
summary(model1)
model1 <- lm(log(Value) ~ WasteDensity, data = WithWaste)
model1_res <- tidy(model1)
summary(model1)
model1 <- lm(log(Value) ~ WastepointCount, data = WithWaste)
model1_res <- tidy(model1)
summary(model1)
model1_res <- tidy(model1)
model1 <- lm(Value ~ WastepointCount, data = WithWaste)
model1_res <- tidy(model1)
summary(model1)
model1_res <- tidy(model1)
summary(model1)
library(spatstat)
library(sp)
library(rgeos)
library(maptools)
library(GISTools)
library(tmap)
library(sf)
library(geojsonio)
library(tmaptools)
library(raster)
library(fpc)
library(plyr)
library(OpenStreetMap)
library(rgdal)
library(tidyverse)
library(broom)
library(ggplot2)
BoroughMapSF <- read_shape("BoundaryData/england_lad_2011.shp", as.sf = TRUE)
I_O_brough <- read.csv('Inner_Outer.csv')
names(I_O_brough) <- c("Code", "Inner_Outer")
BoroughMapSF <- merge(BoroughMapSF, I_O_brough, by.x = "code", by.y = "Code")
Pricedata <- read.csv('PriceData.csv')
Pricedata$Value <- as.numeric(Pricedata$Value)
names(Pricedata) <- c("Code", "Value")
LondonWards <- readOGR("London_Ward_CityMerged.shp", layer="London_Ward_CityMerged")
BoroughMap <- as(BoroughMapSF, "Spatial")
Wastepoint <- geojson_read("point.geojson", what = "sp")
tmap_mode('view')
summary(Wastepoint)
BNG = "+init=epsg:27700"
WGS = "+init=epsg:4326"
BoroughMapBNG <- spTransform(BoroughMap,BNG)
WastepointBNG <- spTransform(Wastepoint, BNG)
tm_shape(BoroughMapBNG) +
tm_polygons(col = NA, alpha = 1.0) +
tm_shape(WastepointBNG) +
tm_dots(col = "blue")
#Here we can find some points lay out the boundaries, thus we need clip the points to make all points are in boundary.
WastepointBNG <- WastepointBNG[BoroughMapBNG,]
summary(Wastepoint)
tm_shape(BoroughMapBNG) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(WastepointBNG) +
tm_dots(col = "blue")
res <- poly.counts(WastepointSub, BoroughMapBNG)
res <- poly.counts(WastepointBNG, BoroughMapBNG)
BoroughMapBNG@data$WastepointCount<-res
BoroughMapBNG@data$WasteDensity <- BoroughMapBNG$WastepointCount/poly.areas(BoroughMapBNG)
BoroughMapBNG@data
tm_shape(BoroughMapBNG) +
tm_polygons("WasteDensity",
style="jenks",
palette="PuOr",
midpoint=NA,
title="Waste Point Density")
BroughBNGSF <- st_as_sf(BoroughMapBNG)
res <- poly.counts(WastepointBNG, BoroughMapBNG)
BoroughMapBNG@data$WastepointCount<-res
BoroughMapBNG@data$WasteDensity <- BoroughMapBNG$WastepointCount/poly.areas(BoroughMapBNG)
BoroughMapBNG@data
tm_shape(BoroughMapBNG) +
tm_polygons("WasteDensity",
style="jenks",
palette="PuOr",
midpoint=NA,
title="Waste Point Density")
BroughBNGSF <- st_as_sf(BoroughMapBNG)
BroughOuter <- BroughBNGSF[which(BroughBNGSF$Inner_Outer =='Outer London'),]
BroughOuterSP <- as(BroughOuter,"Spatial")
BroughOuterSP <- spTransform(BroughOuterSP,BNG)
WastepointSub <- WastepointBNG[BroughOuterSP,]
LondonWards@data <- data.frame(LondonWards@data,Pricedata[match(LondonWards@data[,"GSS_CODE"],Pricedata[,"Code"]),])
WardsOUT <- LondonWards[BroughOuterSP,]
BroughOuter <- BroughBNGSF[which(BroughBNGSF$Inner_Outer =='Outer London'),]
BroughOuterSP <- as(BroughOuter,"Spatial")
BroughOuterSP <- spTransform(BroughOuterSP,BNG)
WastepointSub <- WastepointBNG[BroughOuterSP,]
LondonWards@data <- data.frame(LondonWards@data,Pricedata[match(LondonWards@data[,"GSS_CODE"],Pricedata[,"Code"]),])
WardsOUT <- LondonWards[BroughOuterSP,]
tmap_mode('view')
summary(Wastepoint)
BNG = "+init=epsg:27700"
WGS = "+init=epsg:4326"
LondonWardsBNG <- spTransform(LondonWards,BNG)
BoroughMapBNG <- spTransform(BoroughMap,BNG)
WastepointBNG <- spTransform(Wastepoint, BNG)
tm_shape(BoroughMapBNG) +
tm_polygons(col = NA, alpha = 1.0) +
tm_shape(WastepointBNG) +
tm_dots(col = "blue")
#Here we can find some points lay out the boundaries, thus we need clip the points to make all points are in boundary.
WastepointBNG <- WastepointBNG[BoroughMapBNG,]
summary(Wastepoint)
tm_shape(BoroughMapBNG) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(WastepointBNG) +
tm_dots(col = "blue")
res <- poly.counts(WastepointBNG, BoroughMapBNG)
BoroughMapBNG@data$WastepointCount<-res
BoroughMapBNG@data$WasteDensity <- BoroughMapBNG$WastepointCount/poly.areas(BoroughMapBNG)
BoroughMapBNG@data
tm_shape(BoroughMapBNG) +
tm_polygons("WasteDensity",
style="jenks",
palette="PuOr",
midpoint=NA,
title="Waste Point Density")
BroughBNGSF <- st_as_sf(BoroughMapBNG)
BroughOuter <- BroughBNGSF[which(BroughBNGSF$Inner_Outer =='Outer London'),]
BroughOuterSP <- as(BroughOuter,"Spatial")
BroughOuterSP <- spTransform(BroughOuterSP,BNG)
WastepointSub <- WastepointBNG[BroughOuterSP,]
LondonWards@data <- data.frame(LondonWards@data,Pricedata[match(LondonWards@data[,"GSS_CODE"],Pricedata[,"Code"]),])
WardsOUT <- LondonWardsBNG[BroughOuterSP,]
tm_shape(WardsOUT) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(WastepointSub) +
tm_dots(col = "blue")
res <- poly.counts(WastepointSub, WardsOUT)
WardsOUT@data$WastepointCount<-res
WardsOUT@data$WasteDensity <- WardsOUT$WastepointCount/poly.areas(WardsOUT)
tm_shape(WardsOUT) +
tm_polygons("WasteDensity",
style="jenks",
palette="PuOr",
midpoint=NA,
title="Waste Point Density")
WardsOUTSF <- st_as_sf(WardsOUT)
newvar<-0
attach(WardsOUTSF)
newvar<-0
recode<-function(variable){
newvar[variable>0]<-TRUE
newvar[variable==0]<-FALSE
return(newvar)
}
WardsOUTSF$WastepointCount_recode <- recode(WastepointCount)
WardsOUTSF$WastepointCount <- as.numeric(WardsOUTSF$WastepointCount)
tm_shape(WardsOUTSF) +
tm_polygons("WastepointCount_recode")
WithWaste <- subset(WardsOUTSF, WastepointCount_recode > 0, select = c(NAME, Value,WastepointCount))
WithoutWaste<- subset(WardsOUTSF, WastepointCount_recode < 1, select = c(NAME, Value))
library(spdep)
#####
#First calculate the centroids of all Wards in London
coordsW <- coordinates(WardsOUT)
plot(coordsW)
LB_nb <- poly2nb(WardsOUT, queen=T)
#plot them
plot(LB_nb, coordinates(coordsW), col="red")
#add a map underneath
plot(BoroughMapBNG, add=T)
#plot them
plot(LB_nb, coordinates(WardsOUT), col="red")
#plot them
plot(LB_nb, coordinates(WardsOUT), col="red")
#add a map underneath
plot(WardsOUT, add=T)
model1 <- lm(log(Value) ~ WastepointCount, data = WithWaste)
model1_res <- tidy(model1)
summary(model1)
model1 <- lm(log(Value) ~ WastepointCount, data = WardsOUTSF)
summary(model1)
I_LWard_Global_Density <- moran.test(LondonWards@data$WasteDensity, Lward.lw)
Lward.lw <- nb2listw(LWard_nb, style="C")
Lward.lw <- nb2listw(LB_nb, style="C")
I_LWard_Global_Density <- moran.test(LondonWards@data$WasteDensity, Lward.lw)
I_LWard_Global_Density <- moran.test(WardsOUT@data$WasteDensity, Lward.lw)
I_LWard_Global_Density
C_LWard_Global_Density <- geary.test(WardsOUT@data$WasteDensity, Lward.lw)
C_LWard_Global_Density
G_LWard_Global_Density <- globalG.test(WardsOUT@data$WasteDensity, Lward.lw)
G_LWard_Global_Density
